import "ast"

def Converter.create_decls(&converter, node: &ast.AST) =
    for n := node.nodes do
        match n.payload with
            FuncDef info -> register_func_def converter, node, info
            _ ->

def Converter.convert_node(&converter, node: &ast.AST) =
    self := converter.get_scope!

    previous_num_vars := self.var_counter

    match node.payload with
        Create ->
        If -> convert_if converter, node
        While ->
            convert_while converter, node
            return

        Assign -> converter.convert_node get_rhs_of_assign node
        FuncDef info ->
            convert_func_def converter, node, info
            return

        _ -> converter.convert_nodes node.nodes

    if is_block node then
        self.var_counter = previous_num_vars

    match node.payload with
        Identifier read_info -> convert_identifier converter, node, read_info

        FuncDef info ->
        Tuple ->

        CreateAssign ->
        Block -> convert_block converter, node

        If ->

        While ->

        Condition -> convert_condition converter, node

        Else -> convert_else converter, node

        Assign -> convert_assign converter, node

        String str -> convert_string converter, node, str

        Create -> convert_create converter, node

        FuncArg name, typ -> convert_func_arg converter, node, name, typ

        FuncCall ->
            convert_func_call converter, node

        Operator op_kind -> convert_operator converter, node, op_kind

        Bool is_true -> self.append Store_bool is_true

        Int s -> self.append Store_i32 atoi s.to_c_string!

        Float s -> self.append Store_f32 atof s.to_c_string!

        Root ->


def convert(node: &ast.AST) Program =
    functions := box [..]Function

    converter := Converter{
        string_literal_counter = 0
        global_var_counter = 0
        functions = functions
        scopes = []
    }

    global_scope := converter.push_scope!

    add_global_var &converter, "log_int"
    add_global_var &converter, "log_float"
    add_global_var &converter, "log"
    add_global_var &converter, "main"

    converter.create_decls node
    converter.convert_node node

    main_all_blocks := converter.scopes[0].all_blocks
    main_all_blocks[main_all_blocks.length - 1].code.append FuncReturn types.make_Void!

    deref_all_blocks := *main_all_blocks
    main := Function{
        name = "main"
        _type = types.make_FuncPtr!
        all_blocks = deref_all_blocks
        id = converter.get_id_of_var "main"
    }

    functions.append main

    deref_functions := *functions
    Program{ deref_functions }
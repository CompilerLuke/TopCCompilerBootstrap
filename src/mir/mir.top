import "types"

type ID is uint

type ReadInfo =
    is_global: bool
    _type: types.CompilerType
    id: uint
    name: string

type OpCode either
    Add_i32
    Sub_i32
    Mul_i32
    Div_i32
    LT_i32


    Add_f32
    Sub_f32
    Mul_f32
    Div_f32
    LT_f32

    Store_i32(i32)
    Store_f32(float)
    Store_bool(bool)

    Create(&ReadInfo)
    Read(&ReadInfo)
    Assign(&ReadInfo)
    FuncArg(uint, &ReadInfo)

    FuncCall(&types.FuncPtr)
    FuncReturn(types.CompilerType)

    CondJump(uint, uint)
    Jump(uint)

    StringRef(uint)
    StringDecl(uint, string)

type Block =
    id: ID
    code: &[..]OpCode

/*
type CreateVar =
    name: ID

def CreateVar.toString(&self) string =
    self.name.toString!
*/

type Function =
    name: string
    _type: &types.FuncPtr
    all_blocks: []&Block
    id: uint

type Program =
    functions: []Function

def calc_size(self: types.CompilerType) uint =
    match self with
        Void -> sizeof none
        Bool -> sizeof bool
        String -> sizeof string
        Float size -> size / 4
        Int unsigned, size -> size / 4
        Struct info ->
            panic "Not handled yet!"
            0

        Func info -> sizeof || -> none
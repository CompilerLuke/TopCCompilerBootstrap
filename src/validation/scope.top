import "hashMap"
import "types"
from "ast" import (ReadInfo, AST)
import "error"

type DeclInfo =
    _type: types.CompilerType
    is_global: bool

def make_DeclInfo(_type: types.CompilerType) DeclInfo =
    DeclInfo{
        _type = _type
        is_global = false
    }

type ScopeBlock =
    vars: hashMap.HashMap[DeclInfo]

def make_ScopeBlock() ScopeBlock =
    vars := hashMap.make_HashMap_size::[DeclInfo] 2 ^ 3, &malloc_as_allocator

    ScopeBlock{
        vars = vars
    }

def ScopeBlock.free(&self) =
    self.vars.free!

type Scope =
    blocks: [..]ScopeBlock

def make_Scope() &Scope =
    blocks := [..]ScopeBlock
    blocks.append make_ScopeBlock!

    box Scope{
        blocks = blocks
    }

def Scope.free(using &self) =
    for i := 0..blocks.length do
        blocks[i].free!

    blocks.free!

def Scope.push(&self) =
    self.blocks.append make_ScopeBlock!

def Scope.pop(&self) =
    self.blocks[self.blocks.length - 1].free!
    _ := self.blocks.pop!

def Scope.get_var(&self, name: string) Maybe[&DeclInfo] =
    for i := 0..self.blocks.length do
        vars := &self.blocks[self.blocks.length - 1 - i].vars

        if vars.contains name then
            return Some &vars[name]

    None

def Scope.create_decl(&self, name: string, info: &DeclInfo, node: &ast.AST) Maybe[&error.CompilerError] =
    assert self.blocks.length > 0, "Missing global scope"

    outer_block := &self.blocks[self.blocks.length - 1]

    info.is_global = self.blocks.length == 1

    if outer_block.vars.contains name then Some error.make_Error node, "Var {name} already exists"
    else
        outer_block.vars.insert name, *info
        None
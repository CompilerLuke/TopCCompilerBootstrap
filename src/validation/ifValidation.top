import "ast"
from "error" import all
import "validator"
import "types"
import "print"
import "scope"

def block_returns_value(node: &ast.AST) Maybe[types.CompilerType] =
    assert node.payload.tag == ast.Block.tag, "Expecting block"

    if node.length! > 0 and not types.Void.is_type node[node.length! - 1]._type then
        Some node.nodes[node.length! - 1]._type
    else
        None

def validate_if(state: &validator.State, node: &ast.AST) Maybe[&CompilerError] =
    ?state.validate_nodes node.nodes

    i := 1
    while i < node.length! do
        if Some ret := block_returns_value node[i] then
            node._type = ret
        i += 2

    None

def validate_condition(state: &validator.State, node: &ast.AST) Maybe[&CompilerError] =
    ?state.validate_nodes node.nodes

    condition := node.nodes[0]

    if not types.Bool.is_type condition._type then
        Some error.make_Error condition, "Expecting boolean expression, not {condition._type}"
    else
        None
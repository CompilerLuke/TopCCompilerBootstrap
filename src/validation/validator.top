import "ast"
from "error" import all
import "operatorValidation"
import "varValidation"
import "scope"
import "types"
import "ifValidation"
import "funcValidator"
import "tupleValidator"

type State =
    scope: &scope.Scope

def State.validate(&state, syntax_tree: &ast.AST) Maybe[&error.CompilerError] =
    match syntax_tree.payload with
        Operator kind -> operatorValidation.validate state, kind, syntax_tree
        Identifier read_info -> varValidation.validate_read state, read_info, syntax_tree
        CreateAssign -> varValidation.validate_create_assign state, syntax_tree
        If -> ifValidation.validate_if state, syntax_tree
        Condition -> ifValidation.validate_condition state, syntax_tree
        FuncDef info -> funcValidator.validate state, syntax_tree, info
        FuncCall -> funcValidator.validate_call state, syntax_tree
        Tuple -> tupleValidator.validate_tuple state, syntax_tree
        _ -> state.validate_nodes syntax_tree.nodes

def State.validate_nodes(&self, nodes: []&ast.AST) Maybe[&error.CompilerError] =
    for node := nodes do
        ?self.validate node

    None

def register_log_func(state: &State, name: string, typ: types.CompilerType, syntax_tree: &ast.AST) Maybe[&error.CompilerError] =
    log_func_type := types.make_FuncPtr!
    log_func_type.args = box [typ]
    log_func_type.external = true

    decl_info := scope.make_DeclInfo types.Func log_func_type
    state.scope.create_decl name, &decl_info, syntax_tree

def validate(syntax_tree: &ast.AST) Maybe[&error.CompilerError] =
    state := State{
        scope = scope.make_Scope!
    }

    ?register_log_func &state, "log_float", types.make_Float!, syntax_tree
    ?register_log_func &state, "log_int", types.make_Int!, syntax_tree
    ?register_log_func &state, "log", types.String, syntax_tree

    ?state.create_decl syntax_tree
    ?state.validate syntax_tree
    ?check_useless syntax_tree

    check_other syntax_tree

def useless(i: &ast.AST, mesg: string) Maybe[&error.CompilerError] =
    Some make_Error i, "Useless {mesg}"

def check_useless(i: &ast.AST) Maybe[&error.CompilerError] =
    match i.payload with
        Identifier _ -> useless i, "read"
        Int -> useless i, "int literal"
        Float -> useless i, "float literal"
        Bool -> useless i, "bool literal"
        Operator kind -> useless i, "operator"
        Root ->
            for node := i.nodes do
                ?check_useless node
            None
        _ -> None

def State.create_decl(&self, node: &ast.AST) Maybe[&error.CompilerError] =
    for n := node.nodes do
        match n.payload with
            FuncDef info -> ?funcValidator.add_func_to_scope self, node, info
            _ ->

    None

def check_other(node: &ast.AST) Maybe[&error.CompilerError] =
    None
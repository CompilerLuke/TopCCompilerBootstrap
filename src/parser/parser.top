import "ast"
import "lexer"
from "error" import all
from "operatorParser" import all
from "basicTypes" import all
from "varParser" import all
from "tuple" import all
from "funcCall" import all
from "ifStatement" import all
from "whileStatement" import all
from "funcParser" import all
from "stringParser" import all
from "structParser" import all

type Parser =
    tokens: []lexer.Token
    filename: string
    current_node: &ast.AST
    iter: uint
    op_stack: OpStack
    active_index: [..]uint

    num_paren: uint
    num_indent: uint

    paren_stack: [..]uint
    indent_stack: [..]uint

def parse(tokens: []lexer.Token, filename: string) Result[&ast.AST,&CompilerError] =
    p := Parser{
        tokens = tokens
        filename = filename
        current_node = 0 cast &ast.AST
        iter = 0
        op_stack = make_OpStack!
        num_paren = 0
        num_indent = 0
        active_index = [..]uint
        paren_stack = [..]uint
        indent_stack = [..]uint
    }

    p.current_node = ast.make_AST &p, ast.Root

    p.parse!

def Parser.get_filename(&self) string = self.filename
def Parser.get_line(&self) uint = self.current!.line
def Parser.get_column(&self) uint = self.current!.column

def Parser.get_active_index(&self) uint =
    self.active_index[self.active_index.length - 1]

def Parser.set_active_index(&self, val: uint) =
    self.active_index[self.active_index.length - 1] = val

def Parser.peek(using &self) lexer.Token =
    if iter + 1 < tokens.length then
        tokens[self.iter + 1]
    else
        be := self.behind!
        lexer.Token{
            kind = lexer.Invalid
            value = ""
            line = be.line
            column = be.column }

def Parser.current(using &self) lexer.Token =
    tokens[self.iter]

def Parser.behind(using &self) lexer.Token =
    if self.iter < 1 then
        lexer.Token{
            kind = lexer.Invalid
            value = ""
            line = 0
            column = 0
        }
    else
        tokens[self.iter - 1]

def Parser.next(using &self) lexer.Token =
    t := self.peek!
    iter += 1
    t

def Parser.eval_till_end(&self) Maybe[&error.CompilerError] =
    indent := self.num_indent
    paren := self.num_paren

    while not self.is_end! do
        _ := self.next!
        ?self.eval!

    None

def Parser.comma(&self) Maybe[&error.CompilerError] =
    ?self.op_stack.pop self
    self.op_stack.push self
    self.active_index[self.active_index.length - 1] = self.current_node.length!
    None

def Parser.pop_last(&self) Result[&ast.AST, &error.CompilerError] =
    if self.current_node.nodes.length == 0 then
        return Error error.make_Error self, "Unexpected"

    Ok self.current_node.nodes.pop!

def Parser.eval(using &self) Maybe[&error.CompilerError] =
    self.eval_not_func_call false

def Parser.parse(rbp: int) int =
    t := current!
    token = next!
    left := t.nud!
    while rbp < token.lbp do
        t = token
        token = next!
        left = t.led left

    left

def Parser.eval_not_func_call(using &self, ignore_func_call: bool) Maybe[&error.CompilerError] =
    token := self.current!

    self.paren_stack.append self.num_paren
    self.indent_stack.append self.num_indent

    value := match token.kind with
        Operator -> parse_operator self, token.value
        Integer -> parse_int_literal self, token.value
        Float -> parse_float_literal self, token.value
        Identifier -> parse_identifier self, token.value
        Indent ->
            if self.peek!.value == "\n" then
                _ := self.next!
            else
                self.num_indent = token.value.length

            None

        Keyword ->
            match token.value with
                "true" or "false" -> parse_bool_literal self, token.value
                "if" -> if_expr self
                "else" -> else_expr self
                "while" -> while_expr self
                "def" -> parse_funcDef self
                "type" -> parse_struct self
                _ -> Some error.make_Error self, "{token.value} token, not handled"

        Symbol ->
            match token.value with
                "(" ->
                    if is_unary self then
                        parse_tuple self
                    else
                        parse_funcCall self

                ":=" -> parse_create_assign self
                "=" -> parse_assign self
                "+=" -> parse_add_assign self
                "-=" -> parse_sub_assign self
                "," -> Some error.make_Error self, "Unexpected ,"
                "\n" -> None
                ")" ->
                    if self.num_paren > 0 then
                        self.num_paren -= 1
                        None
                    else
                        Some error.make_Error self, "Unexpected )"
                _ -> Some error.make_Error self, "{token.value} token, not handled"

        String -> parse_string self
        _  -> Some error.make_Error self, "{token.kind} token, not handled"

    _ := self.paren_stack.pop!
    _ := self.indent_stack.pop!

    value

def Parser.push_current_node(using &self, node: &ast.AST) =
    self.current_node.add node
    self.current_node = node

    self.op_stack.push self
    self.active_index.append 0

def Parser.pop_current_node(using &self) Maybe[&CompilerError] =
    guard Some owner := self.current_node.owner
    else panic "Tried to pop current node which didn't have an owner"

    ?self.op_stack.pop self
    _ := self.active_index.pop!
    self.current_node = owner

    None

def Parser.pop(&self, mesg: string) Result[&ast.AST, &CompilerError] =
    if self.current_node.nodes.length == 0 then
        return Error error.make_Error self, "pop: {mesg}"

    Ok self.current_node.nodes.pop!

def Parser.push_paren(&self) uint =
    self.num_paren += 1
    self.num_paren - 1

def Parser.expect_tag(&self, typ: lexer.TokenType, mesg: string) Maybe[&CompilerError] =
    if self.current!.kind.tag != typ.tag then
        Some error.make_Error self, "Expect tag: {mesg}"
    else
        None

def Parser.expect_next_tag(&self, typ: lexer.TokenType, mesg: string) Maybe[&CompilerError] =
    _ := self.next!
    self.expect_tag typ, mesg

def Parser.expect_token(&self, tok: string, mesg: string) Maybe[&CompilerError] =
    if self.current!.value != tok then
        Some error.make_Error self, "Expect token: {mesg}"
    else
        None

def Parser.expect_next_token(&self, tok: string, mesg: string) Maybe[&CompilerError] =
    _ := self.next!
    self.expect_token tok, mesg

def Parser.is_end(&self) bool =
    num_indent := self.indent_stack[self.indent_stack.length - 1]
    num_paren := self.paren_stack[self.paren_stack.length - 1]

    if num_paren > self.num_paren then return true
    match self.current!.kind with
        Indent -> self.num_indent <= num_indent
        _ -> false

def Parser.parse(using &self) Result[&ast.AST, &CompilerError] =
    op_stack.push self

    while iter < tokens.length do
        ?e self.eval!
        self.next!

    iter = tokens.length - 1
    ?e op_stack.pop self

    Ok self.current_node


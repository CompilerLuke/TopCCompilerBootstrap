import "parser"
from "error" import all
import "ast"

def if_body(self: &parser.Parser) Maybe[&CompilerError] =
    cond := ast.make_AST self, ast.Condition

    self.push_current_node cond

    in_block := false

    while not self.is_end! do
        token := self.next!
        if token.value == ":" and not in_block then
            ?self.pop_current_node!

            block := ast.make_AST self, ast.Block
            in_block = true

            self.push_current_node block
        else
            ?self.eval!

    if not in_block then
        return Some error.make_Error self, "Expecting :"

    ?self.pop_current_node!

    None

def if_expr(self: &parser.Parser) Maybe[&CompilerError] =
    toplevel := ast.make_AST self, ast.If

    self.push_current_node toplevel

    ?if_body self
    ?self.pop_current_node!
    None

def else_expr(self: &parser.Parser) Maybe[&error.CompilerError] =
    self.expect_next_token ":", "Expecting :"

    is_if_condition := false

    if self.current_node.nodes.length > 0 then
        node := self.current_node.nodes[self.current_node.nodes.length - 1]

        if node.payload.tag == ast.If.tag then
            assert node.nodes.length >= 2, "If block is empty"

            if_condition := node.nodes[node.nodes.length - 2]
            is_if_condition = if_condition.payload.tag == ast.Condition.tag

    if not is_if_condition then
        return Some make_Error self, "Unexpected else"

    self.current_node = self.current_node.nodes[self.current_node.nodes.length - 1]

    self.current_node.add ast.make_AST self, ast.Else

    block := ast.make_AST self, ast.Block
    self.push_current_node block

    while not self.is_end! do
        _ := self.next!
        ?self.eval!

    ?self.pop_current_node!
    self.current_node = self.current_node.owner.unwrap!

    None

from "error" import all
import "stringBuilder"
import "hashMap"
import "scope"

type CompilerType either
    Void
    String
    Bool
    Int(bool, uint)
    Float(uint)
    Struct(&StructInfo)
    Func(&FuncPtr)

def CompilerType.toString(self) string =
    match self with
        Void -> "none"
        String -> "string"
        Bool -> "bool"
        Int unsigned, size -> int_to_string unsigned, size
        Float size -> float_to_string size
        Struct info -> info.toString!
        Func info -> info.toString!

def CompilerType.expect_equals(self, other: CompilerType, thrower: Thrower) Maybe[&CompilerError] =
    if self.equals other then None
    else Some error.make_Error thrower, "Expecting {self}, not {other}"

def CompilerType.equals(self, other: CompilerType) bool =
    self = self.to_real_type!
    other = other.to_real_type!

    if self.tag != other.tag then return false
    match (self, other) with
        ((Int unsigned1, size1), Int unsigned2, size2) ->
            unsigned1 == unsigned2 and size1 == size2

        ((Float size), Float size1) -> size == size1

        ((Struct info1), Struct info2) -> info1 == info2

        ((Func info1), (Func info2)) -> info1 == info2

        _ -> true

def CompilerType.duck_type(self, other: CompilerType, thrower: Thrower) Maybe[&CompilerError] =
    match self with
        Void or String or Bool -> self.expect_equals other, thrower
        Int unsigned, size -> int_duck_type unsigned, size, other, thrower
        Float size -> float_duck_type size, other, thrower
        Struct info -> info.duck_type other, thrower
        Func info -> info.duck_type other, thrower

def CompilerType.to_real_type(self) CompilerType =
    match self with
        _ -> self

def CompilerType.is_type(self, other: CompilerType) bool =
    self.to_real_type!.tag == other.to_real_type!.tag

let func_type = Func 0 cast &FuncPtr
let struct_type = Struct 0 cast &StructInfo
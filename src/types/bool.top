import "error"
import "scope"

type Bool =

def Bool.toString(&self) string =
    "bool"

def Bool.duck_type(&self, other: CompilerType, sc: &scope.Scope thrower: Thrower) Maybe[&error.CompilerError] =
    if is_kind::[Bool] other, sc then None
    else Some error.make_Error thrower, "Expecting boolean, not {other}"

def Bool.to_real_type(&self, sc: &scope.Scope) Result[CompilerType, &error.CompilerError] =
    Ok self as CompilerType

def Bool.equals(&self, other: CompilerType, sc: &scope.Scope) bool =
    is_kind::[Bool] other, sc

def Bool.calc_size(&self) uint = 1

bool_type := Bool{}

def make_Bool() &Bool =
    &bool_type
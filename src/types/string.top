import "error"
import "scope"

type String =

def String.toString(&self) string =
    "string"

def String.to_real_type(&self, sc: &scope.Scope) Result[CompilerType, &error.CompilerError] =
    Ok self as CompilerType

def String.duck_type(&self, other: CompilerType, sc: &scope.Scope, thrower: Thrower) Maybe[&error.CompilerError] =
    if not is_kind::[String] other, sc then Some make_Error thrower, "Expecting {self} not {other}"
    else None

def String.equals(&self, other: CompilerType, sc: &scope.Scope) bool =
    is_kind::[String] other, sc

def String.calc_size(&self) uint = sizeof string

string_type := String{}
def make_StringType() &String =
    &string_type
import "error"
import "scope"

type Int =

def Int.toString(&self) string =
    "int"

def Int.to_real_type(&self, sc: &scope.Scope) Result[CompilerType, &error.CompilerError] =
    Ok self as CompilerType

def Int.duck_type(&self, other: CompilerType, sc: &scope.Scope, thrower: Thrower) Maybe[&error.CompilerError] =
    if not is_kind::[Int] other, sc then Some make_Error thrower, "Expecting {self} not {other}"
    else None

def Int.equals(&self, other: CompilerType, sc: &scope.Scope) bool =
    is_kind::[Int] other, sc

def Int.calc_size(&self) uint =
    4

int_type := Int{}

def make_Int() &Int =
    &int_type
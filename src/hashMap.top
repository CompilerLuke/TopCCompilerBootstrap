type Hash is uint

def hash_string(s_key: string, table_size: uint) Hash =
    h := 0
    o := 31415
    t := 27183

    key := s_key.to_c_string!

    for i := 0..s_key.length do
        h = (o * h + (*(indexPtr key, i)) cast uint) % table_size
        o = o * t % (table_size - 1)

    h

type HashBucket[V] =
    keys: [..]string
    values: [..]V

def HashBucket[V].free(&self) =
    self.keys.free!
    self.values.free!

def make_HashBucket[V](allocator: &Allocator) HashBucket[V] =
    keys := [..]string
    values := [..]V

    keys.allocator = Some allocator
    values.allocator = Some allocator

    HashBucket{
        keys = keys
        values = values
    }

type HashMap[V] =
    buckets: []HashBucket[V]
    length: uint

def HashMap[V].insert(&self, key: string, value: V) =
    if self.length > self.buckets.length/3*4 then
        assert self.buckets.length > 0, "Resizing empty hash map!"

        hash_map_allocator := self.buckets[0].keys.allocator.default context.allocator

        new_hash := make_HashMap_size::[V] self.buckets.length * 2, hash_map_allocator

        for per_bucket := self.buckets do
            for c := 0..per_bucket.keys.length do
                new_hash.insert per_bucket.keys[c], per_bucket.values[c]

        self.free!

        *self = new_hash

    hash := hash_string key, self.buckets.length
    bucket := &self.buckets[hash]

    bucket.keys.append key
    bucket.values.append value

    self.length += 1

def HashMap[V].op_get(&self, key: string) &V =
    hash := hash_string key, self.buckets.length
    bucket := &self.buckets[hash]
    for b_key := bucket.keys do
        if b_key == key then
            return &bucket.values[i]

    panic "No {key} in hash map"
    0 cast &V

def HashMap[V].contains(&self, key: string) bool =
    hash := hash_string key, self.buckets.length
    bucket := &self.buckets[hash]
    for b_key := bucket.keys do
        if b_key == key then
            return true

    false

def HashMap[V].free(&self) =
    for bucket := self.buckets do
        bucket.free!

def HashMap[V].keys(&self) []string =
    arr := [..]string
    for bucket := self.buckets do
        for key := bucket.keys do
            arr.append key
    arr

def make_HashMap_size[V](size: uint, allocator: &Allocator) HashMap[V] =
    buckets := [..]HashBucket[V]
    buckets.allocator = Some allocator

    for i := 0..size do
        buckets.append make_HashBucket::[V] allocator

    HashMap{
        buckets = buckets
        length = 0
    }

def make_HashMap[V]() HashMap[V] =
    make_HashMap_size::[V] 2 ^ 3, context.allocator